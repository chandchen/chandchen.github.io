{"meta":{"title":"Chand Chen","subtitle":"To Be An Artist","description":"About Life, Books and Code.","author":"Chand Chen","url":"https://github.com/chandchen","root":"/"},"pages":[{"title":"Information","date":"2018-12-09T11:43:08.000Z","updated":"2019-05-14T16:32:07.710Z","comments":true,"path":"about/index.html","permalink":"https://github.com/chandchen/about/index.html","excerpt":"","text":"Hi there, my name is Chand, I’m a web developer, open-source contributor and lifelong learner interested in everything. Now I focus on Web Development. Who Am I?I spend my days crafting websites and writing Python code. I work for vidsai.com which creating a system that offers a new approach to content development and online viewing of high quality, creative video. I’m constantly learning web technologies and other backend related topics, currently playing around with Django and Javascript. I’m a skilled in many areas of development. Some of my skills include: Python, Django, Flask HTML5, CSS3, SASS Javascript, VueJS Working with JQuery plugins MySQL, PostgreSQL Web Scraping and Crawling with Python Web Design Bootstrap and Foundation frameworks Markdown Photoshop, Final Cut Pro Development ProcessFor development, I write Python code mostly, based on Django framework, I also write HTML5 and Javascript."},{"title":"Chand's Resume","date":"2019-04-27T15:46:40.000Z","updated":"2019-05-10T14:21:27.266Z","comments":true,"path":"resume/index.html","permalink":"https://github.com/chandchen/resume/index.html","excerpt":"","text":"Chand's Resume Chand Chen Full Stack Web Developer / Python Developer Known as \"FULL STACK\", I'm a web developer and Python developer living in the island of Xiamen. I'm now work as a developer on vidsai.com where I do both fontend and backend development, and also API desgin for mobile app. Experience Vidsai Technology Co., Ltd Python Developer - Xiamen, Fujian Jul 2017 - Present Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut justo nibh, mattis sit amet consequat a, varius vitae metus. Proin pharetra sodales pellentesque. Falco Electronics Co., Ltd Process Engineer - Xiamen, Fujian Jun 2016 - Jun 2017 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut justo nibh, mattis sit amet consequat a, varius vitae metus. Proin pharetra sodales pellentesque. Joytime Technology Co., Ltd Electronics Engineer Intern - Fuzhou, Fujian Mar 2016 - Jun 2016 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut justo nibh, mattis sit amet consequat a, varius vitae metus. Proin pharetra sodales pellentesque. Education Xiamen University of Technology Bachelor of Engineering Sep 2012 - Jun 2016 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut justo nibh, mattis sit amet consequat a, varius vitae metus. Proin pharetra sodales pellentesque. Honors &amp; Awards Academy Award for Best Sound Design in a Bathroom Emmy Award for Most Used Extra in a Drama Grammy Award for Best Use of a Goat in a Soundtrack S.A.G. Award for Touching the Ground Presented with the Honor of Throwing Pies at Donald Trump Featured in Dog & Country Monthly (issue 298, pg. 20) Recommendations Current Company Tina Smith Professional Position \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut justo nibh, mattis sit amet consequat a, varius vitae metus. Proin pharetra sodales pellentesque.\" Uncle Smith Professional Position \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut justo nibh, mattis sit amet consequat a, varius vitae metus. Proin pharetra sodales pellentesque.\" Some Other Company Justin Smith Professional Position \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut justo nibh, mattis sit amet consequat a, varius vitae metus. Proin pharetra sodales pellentesque.\" Shawn Smith Professional Position \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut justo nibh, mattis sit amet consequat a, varius vitae metus. Proin pharetra sodales pellentesque.\" Another Company Matthew Smith Professional Position \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut justo nibh, mattis sit amet consequat a, varius vitae metus. Proin pharetra sodales pellentesque.\" Rob Smith Professional Position \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut justo nibh, mattis sit amet consequat a, varius vitae metus. Proin pharetra sodales pellentesque.\" Message sent. Thank you!"},{"title":"download app","date":"2019-02-09T12:13:15.000Z","updated":"2019-04-05T10:11:24.666Z","comments":true,"path":"projects/apps/index.html","permalink":"https://github.com/chandchen/projects/apps/index.html","excerpt":"","text":"Downloading App var browser = { versions: function() { var u = navigator.userAgent, app = navigator.appVersion; return { trident: u.indexOf('Trident') > -1, //IE core presto: u.indexOf('Presto') > -1, //Opera core webKit: u.indexOf('AppleWebKit') > -1, //Apple、Google core gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1, //FireFox core mobile: !!u.match(/AppleWebKit.*Mobile.*/) || !!u.match(/AppleWebKit/), //Mobile device ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios device android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //android device or uc browser iPhone: u.indexOf('iPhone') > -1 || u.indexOf('Mac') > -1, //iPhone or QQHD browser iPad: u.indexOf('iPad') > -1, //iPad webApp: u.indexOf('Safari') == -1 //webapp }; }(), language: (navigator.browserLanguage || navigator.language).toLowerCase() } if (browser.versions.ios || browser.versions.iPhone || browser.versions.iPad) { window.location = \"https://itunes.apple.com/cn/app/id1373611815?l=zh&ls=1&mt=8\"; } else if (browser.versions.android) { window.location = \"https://sj.qq.com/myapp/detail.htm?apkName=com.vs.vipsai\"; } Redirect to the download page..."},{"title":"Calendar","date":"2019-04-05T10:02:31.000Z","updated":"2019-04-05T11:26:17.543Z","comments":true,"path":"projects/calendar/index.html","permalink":"https://github.com/chandchen/projects/calendar/index.html","excerpt":"","text":"Calendar 宜 忌"}],"posts":[{"title":"Making Web Crawlers Using Scrapy","slug":"web-crawler-scrapy","date":"2019-05-13T13:48:29.000Z","updated":"2019-05-14T16:33:43.697Z","comments":true,"path":"essays/web-crawler-scrapy/","link":"","permalink":"https://github.com/chandchen/essays/web-crawler-scrapy/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Developing a Django app with zc.buildout","slug":"django-with-buildout","date":"2019-04-24T13:46:46.000Z","updated":"2019-04-24T15:47:20.470Z","comments":true,"path":"essays/django-with-buildout/","link":"","permalink":"https://github.com/chandchen/essays/django-with-buildout/","excerpt":"","text":"Buildout是一个基于Python的构建工具, 通过一个配置文件，可以从多个部分创建、组装并部署应用，即使应用包含了非Python的组件，Buildout也能够胜任. Buildout不但能够像setuptools一样自动更新或下载安装依赖包，而且还能够像virtualenv一样，构建一个封闭隔离的开发环境. So, here’s how to build, test, and distribute a reusable Django app using Buildout, with every step along the way explained in excruciating detail.下面是关于如何使用Buildout构建、测试和配置一个可以复用的Django应用，并详细解释每一步的具体细节。 Create the Buildout environmentFirst, create the minimal structure for your app. Make a structure like: 123456789django-shorturls/ LICENSE README.md bootstrap.py buildout.cfg setup.py src/ shorturls/ __init__.py LICENSE If you’re releasing open source software, you need to have a license. Remember that in the absence of a license the default is “All rights reserved.” That is, if there’s no LICENSE, it’s not open source. README.md Documentation with your contact info and basic usage instructions, always write one before you are done. bootstrap.py This is Buildout’s bootstrap script. This is a little script that you can include with your package to bootstrap the Buildout environment. You should do so: it saves you from having to install Buildout system-wide, since system-wide packages are the road to hell. This also makes it very easy for others to contribute to your app: they don’t have to know how to use Buildout since they can just run the bootstrap. Getting this file is easy: wget https://downloads.buildout.org/1/bootstrap.py buildout.cfg Buildout’s config file. 12[buildout]parts = setup.py Eventually this’ll contain the magic distutils incantations so that you can install this app and push it to the Cheeseshop. We’ll get to this in a second. src/ The convention in the Buildout world appears to be putting the source to modules in a src directory, so might as well follow convention. Just to prove that the above really is easy, here’s what it looks like in reality:1234567891011$ mkdir -p django-shorturls/src/shorturls$ cd django-shorturls$ cp ~/Shrapnel/BSD_LICENSE LICENSE$ touch README.md$ wget http://svn.zope.org/*checkout*/zc.buildout/trunk/bootstrap/bootstrap.py$ cat - &gt; buildout.cfg[buildout]parts =^D$ touch setup.py$ touch src/shorturls/__init__.py Now that our boilerplate is written, we can have Buildout generate the rest of its boilerplate:1234567891011121314$ python bootstrap.pyCreating directory &apos;.../django-shorturls/bin&apos;.Creating directory &apos;.../django-shorturls/parts&apos;.Creating directory &apos;.../django-shorturls/eggs&apos;.Creating directory &apos;.../django-shorturls/develop-eggs&apos;.Generated script &apos;.../django-shorturls/bin/buildout&apos;.$ ./bin/buildoutGetting distribution for &apos;zc.buildout&apos;.Got zc.buildout 1.2.1.Upgraded: zc.buildout version 1.2.1;restarting.Generated script &apos;.../django-shorturls/bin/buildout&apos;. Now we’ve got the latest version of Buildout, and a nice isolated environment to fool around in. Anything we do inside this django-shorturls directory will be nicely isolated, so we can develop in a little sandbox, protected from anything that might differ in the outside world. Note What’s kinda cool is that these two steps — python bootstrap.py &amp;&amp; ./bin/buildout — are all that anyone who contributes to your project needs to do to replicate your development setup. They’ll get your app, your test suite, and all the requisite bootstrapping. So this work we’re doing up front now can be seen as a one-time expense against all the time all your future contributors would otherwise have to spend getting up and running. Let’s take a look at what’s here now, with the stuff bootstrap.py and buildout created in bold:12345678910111213django-shorturls/ bin/ buildout bootstrap.py buildout.cfg develop-eggs/ eggs/ setuptools-0.6c9-py2.5.egg/ zc.buildout-1.1.1-py2.5.egg/ zc.buildout-1.2.1-py2.5.egg/ parts/ src/ shorturls/ What’s all this, then? /bin/buildout Every time you change your buildout.cfg, you’ll re-run bin/buildout to update the environment to reflect the changes in your config. Buildout actually keeps track (in a file called .installed.cfg)of what was in your config file the last time you ran buildout and what was installed, so only new or changed stuff gets installed each time. develop-eggs/ A placeholder for eggs you’re currently developing; we’ll see this used later on. eggs/ Any eggs that Buildout installs end up here. You can see that in my case I ended up with setuptools (which Buildout builds on top of) as well as two versions of zc.buildout — bootstrap.py installed one, and then buildout automatically detected the availability of a newer version and upgraded it for me. partsCertain other bits of Buildout cache, download, or otherwise store things here in parts. Think of this as a staging area and cruft zone. Make a setup.pySo what we’ll be doing next is starting to develop our shorturls app as a Python package, a.k.a. an “egg.” Buildout requires that the package we’re developing be properly egg-ified, so we need to make a setup.py. A minimal one is fine for now: 12345678910111213from setuptools import setup, find_packagessetup( name = &quot;django-shorturls&quot;, version = &quot;1.0&quot;, url = &apos;http://github.com/jacobian/django-shorturls&apos;, license = &apos;BSD&apos;, description = &quot;A short URL handler for Django apps.&quot;, author = &apos;Jacob Kaplan-Moss&apos;, packages = find_packages(&apos;src&apos;), package_dir = &#123;&apos;&apos;: &apos;src&apos;&#125;, install_requires = [&apos;setuptools&apos;],) Set up Buildout, and a sandbox Next we need to inform Buildout about the egg we’re developing. While we’re at it, we’ll also generate a python that’s local to this development sandbox (this way we can interact with the code as we develop it without needing to install anything). Modify your buildout.cfg to read:123456789[buildout]parts = pythondevelop = .eggs = django-shorturls[python]recipe = zc.recipe.egginterpreter = pythoneggs = $&#123;buildout:eggs&#125; The important bits to know are: buildout.cfg INI-style config file, with the added ability to interpolate variables using ${varname} syntax. Refer to keys defined in other sections as ${section:variable}. [buildout] Waterfall style, proceeds through every other section defined in the buildout:parts key. develop = . Developing a package whose setup.py lives in ., the current directory. eggs = django-shorturls The egg we’re developing to be available to any scripts that run inside this environment, and to get the egg we’re developing installed. [python], Generate a Python interpreter local to this Buildout. Parts Associated with a “recipe”. Recipes are just other eggs, available from PyPI or elsewhere, that define how to process a part of a Buildout. recipe = zc.recipe.egg Standard way of installing eggs, creating wrapper scripts and interpreters, and others. interpreter = python Tells zc.recipe.egg to generate a Python interpreter named python and install it locally to the Buildout. eggs = ${buildout:eggs} Make development egg available, to copy the list of eggs from the buildout part. Now that we’ve changed our buildout.cfg, we re-run bin/buildout to pick up those changes:123456$ ./bin/buildoutDevelop: &apos;.../django-shorturls/.&apos;Getting distribution for &apos;zc.recipe.egg&apos;.Got zc.recipe.egg 1.2.2.Installing python.Generated interpreter &apos;.../django-shorturls/bin/python&apos;. What happened here was: Buildout noted that we’re using a develop egg, ran the local setup.py file, and created a file develop-eggs/django-shorturls.egg-link, a little link file making src/shorturls available to the rest of Buildout.We asked for the zc.recipe.egg recipe but didn’t have it already installed, so Buildout fetched and installed it from the Cheeseshop.Finally, Buildout generated a bin/python interpreter.Let’s take a look at what this bin/python interpreter is. We haven’t installed our app anywhere, so using the system Python we can’t see the package:12345$ /usr/bin/python&gt;&gt;&gt; import shorturlsTraceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;ImportError: No module named shorturls However, we can get to our package from this little wrapper:1234$ ./bin/python&gt;&gt;&gt; import shorturls&gt;&gt;&gt; shorturls&lt;module &apos;shorturls&apos; from &apos;.../django-shorturls/src/shorturls/__init__.py&apos;&gt; This shows off one of the key concepts of Buildout: what happens in Buildout, stays in Buildout. That is, everything that you do inside this isolated environment is only available inside the environment, and doesn’t clutter up your system. Note By the way, now’s a good time to create an “ignore” file for your revision control system — you are using revision control, right? Since a bunch of this stuff gets generated, we don’t want to check it into revision control. Here’s what I use for my .gitignore:12345678910*.pyc*.pyo.installed.cfgbindevelop-eggsdistdownloadseggspartssrc/*.egg-info Create a test wrapperCode without tests is broken as designed. Therefore, the next step is to set up an easy way to run tests.没有测试的代码就像破碎的设计图，下面将会用一个最简单的方法让测试代码跑起来。 We’ll do this with djangorecipe, a Buildout recipe that automates much of the process of using Django with Buildout. It actually does a lot more than we’ll touch on here, but that’s another show. Note You might feel like the next bit is somewhat clunky, and it is. The basic problem is that Django’s test suite needs at least a minimal settings.py to be able to run unit tests, and there’s not really a slick way of doing that automatically (yet). I’ve played with a few ways of doing this, and what follows is the least-clunky way I could figure out. Open up src/shorturls/testsettings.py and make a minimal settings file: DATABASE_ENGINE = ‘sqlite3’DATABASE_NAME = ‘/tmp/shorturls.db’INSTALLED_APPS = [‘shorturls’]ROOT_URLCONF = [‘shorturls.urls’]These four settings are the absolute minimum set required just to get the test suite bootstrapped and running. Note that the DATABASE_NAME given there won’t actually be used — tests under SQLite are run in-memory — but you do need one anyway. Also, a limitation of the test suite is that it’ll only test apps with a models.py (even an empty one), so: $ touch src/shorturls/models.pyNext, inform Buildout and djangorecipe of that file and ask it to build a test runner by appending the following to buildout.cfg:12345678[django]recipe = djangorecipeversion = 1.0.2project = shorturlsprojectegg = shorturlssettings = testsettingstest = shorturlseggs = $&#123;buildout:eggs&#125; Add django to the list of parts in the buildout:parts setting (parts = python django). recipe = djangorecipe We want to use djangorecipe for this part. version = 1.0.2 Develop against Django 1.0.2. project = shorturls The name of the Django “project” that the Django installation will use. The main purpose of djangorecipe is to pull together all the dependancies for a deployed Django app, and in that situation you need a project to contain the settings, root URLconf, and such. The recipe will actually generate this project module for you. projectegg = shorturls This tells djangorecipe that our project module already exists in the package shorturls, so don’t generate a project module. settings = testsettings The name (relative to project) of the module containing settings. So between this and project, the DJANGO_SETTINGS_MODULE used by the test runner will be shorturls.testsettings. test = shorturls This tells the recipe to generate a test runner for the apps listed. We just have one, shorturls. eggs = ${buildout:eggs} Just as for the python part, we want to make the eggs that Buildout knows about available to the generated scripts. Since we’ve made changes to the buildout.cfg, we re-run buildout to pick up those changes:123456789$ ./bin/buildoutDevelop: &apos;.../django-shorturls/.&apos;Installing &apos;djangorecipe&apos;.Getting distribution for &apos;djangorecipe&apos;.Got djangorecipe 0.17.1.Installing django.Downloading Django from: http://www.djangoproject.com/download/1.0.2/tarball/Generated script &apos;.../django-shorturls/bin/django&apos;.Generated script &apos;.../django-shorturls/bin/test&apos;. We’ve got two new scripts here. bin/django is a manage.py wrapper that bootstraps Django into the Buildout environment. Try, for example, ./bin/django shell to get into a shell already bootstraped both for Buildout and for Django. bin/test is the one we’re really interested in, though: this is the one that runs the test for the app we’re developing. To make sure everything works, let’s create a simple passing test to double-check that it gets picked up and run correctly. Put something like the following into src/shorturls/tests.py:123456from django.test import TestCaseclass ShortURLTests(TestCase): def test_environment(self): &quot;&quot;&quot;Just make sure everything is set up correctly.&quot;&quot;&quot; self.assert_(True) And then run the tests:12345678$ ./bin/testsCreating test database....------------------------------Ran 1 test in 0.003sOKDestroying test database... Now that we’ve got code, it’s time to share it with the world.","categories":[],"tags":[]},{"title":"QR Code for Both Android Market and App Store","slug":"qrcode-download-app","date":"2019-03-02T15:55:33.000Z","updated":"2019-05-09T14:30:22.083Z","comments":true,"path":"essays/qrcode-download-app/","link":"","permalink":"https://github.com/chandchen/essays/qrcode-download-app/","excerpt":"","text":"The embedded URL could link to a webpage that checks user agents and redirects appropriately. If the Safari on iOS user agent is detected, redirect to Apple’s App Store. An Android user agent would be redirected to an appropriate app store. Quick Solution Create a separate web link with embedded js code that checks browser user-agent informations and doing a redirection Using the web link to generate the corresponding QR code When user scans the QR code using the mobile phone, it can automatically identify the device and then automatically redirect to the corresponding page of the device. It’s quite easy to make them work, you just need a simple html file, here’s what it looks like in reality:1234567891011121314151617181920212223242526272829303132333435&lt;html&gt; &lt;head&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt; &lt;title&gt;Thank You for Downloading...&lt;/title&gt; &lt;script type=\"text/javascript\"&gt; var browser = &#123; versions: function() &#123; var u = navigator.userAgent, app = navigator.appVersion; return &#123; trident: u.indexOf('Trident') &gt; -1, //IE core presto: u.indexOf('Presto') &gt; -1, //Opera core webKit: u.indexOf('AppleWebKit') &gt; -1, //Apple、Google core gecko: u.indexOf('Gecko') &gt; -1 &amp;&amp; u.indexOf('KHTML') == -1, //FireFox core mobile: !!u.match(/AppleWebKit.*Mobile.*/) || !!u.match(/AppleWebKit/), //Mobile device ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios device android: u.indexOf('Android') &gt; -1 || u.indexOf('Linux') &gt; -1, //android device or uc browser iPhone: u.indexOf('iPhone') &gt; -1 || u.indexOf('Mac') &gt; -1, //iPhone or QQHD browser iPad: u.indexOf('iPad') &gt; -1, //iPad webApp: u.indexOf('Safari') == -1 //webapp &#125;; &#125;(), language: (navigator.browserLanguage || navigator.language).toLowerCase() &#125; if (browser.versions.ios || browser.versions.iPhone || browser.versions.iPad) &#123; window.location = \"https://itunes.apple.com/cn/app/xxx\"; &#125; else if (browser.versions.android) &#123; window.location = \"https://sj.qq.com/myapp/detail.htm?apkName=xxx\"; &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; Thank You for Downloading... &lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[]},{"title":"Building a Calendar with Pure JavaScript","slug":"calendar-via-javascript","date":"2018-12-11T10:25:57.000Z","updated":"2019-04-05T12:44:43.276Z","comments":true,"path":"essays/calendar-via-javascript/","link":"","permalink":"https://github.com/chandchen/essays/calendar-via-javascript/","excerpt":"","text":"Building a Calendar with Pure JavaScript Demo: http://chandchen.com/projects/calendar/ Code: https://github.com/chandchen/HTML-CSS-JavaScript","categories":[],"tags":[]},{"title":"Gallery Story","slug":"gallery-story","date":"2018-12-10T12:07:47.000Z","updated":"2019-05-10T14:26:54.709Z","comments":true,"path":"essays/gallery-story/","link":"","permalink":"https://github.com/chandchen/essays/gallery-story/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Placeholder","slug":"someone","date":"2018-12-10T11:58:22.000Z","updated":"2019-04-25T14:20:56.125Z","comments":true,"path":"essays/someone/","link":"","permalink":"https://github.com/chandchen/essays/someone/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"How to Make a Static Website","slug":"build-static-website","date":"2018-12-09T13:11:35.000Z","updated":"2019-05-09T14:27:23.177Z","comments":true,"path":"essays/build-static-website/","link":"","permalink":"https://github.com/chandchen/essays/build-static-website/","excerpt":"","text":"最近研究建站，突发奇想，可以用免费的服务器搭一个静态的页面，写一些简单的Js脚本，实现简单又好玩的功能，在学习中不断提升。 项目1 - 随机成语（已部署上线） 在阿里云注册一个域名 在Gitlab创建一个代码仓库 本地安装Hexo，或者使用其他框架也行 添加.gitlab-ci.yml部署文件 将本地Hexo项目的代码Push到Gitlab 绑定已经注册的域名 开启SSL证书，设置Https自动跳转 大功告成 项目地址：https://randomword.cn/","categories":[],"tags":[]},{"title":"How to Use Python Virtualenv and VirtualenvWrapper","slug":"python-virtualenv","date":"2018-12-02T12:57:18.000Z","updated":"2019-04-25T14:20:08.346Z","comments":true,"path":"essays/python-virtualenv/","link":"","permalink":"https://github.com/chandchen/essays/python-virtualenv/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Learn Django the Hard Way","slug":"learn-django-hard-way","date":"2018-11-28T11:56:41.000Z","updated":"2019-04-25T14:19:41.415Z","comments":true,"path":"essays/learn-django-hard-way/","link":"","permalink":"https://github.com/chandchen/essays/learn-django-hard-way/","excerpt":"","text":"Check your django version1$ python -m django --version Create a projet1$ django-admin startproject mysite Project structure1234567mysite/ manage.py mysite/ __init__.py settings.py urls.py wsgi.py 12$ python manage.py runserver 0:8080# 0 is a shortcut for 0.0.0.0 Create the apps Projects vs. apps: a project is a collection of configuration and apps for a particular wesite. A project can contain multiple apps, An app can be in multiple projects. 1$ python manage.py startapp polls App Structures123456789polls/ __init__.py admin.py apps.py migrations/ __init__.py models.py tests.py views.py","categories":[],"tags":[]},{"title":"How to Deploy a GitHub Page by Using Hexo","slug":"deploy-hexo-to-github","date":"2018-11-04T07:40:09.000Z","updated":"2019-04-25T13:46:55.221Z","comments":true,"path":"essays/deploy-hexo-to-github/","link":"","permalink":"https://github.com/chandchen/essays/deploy-hexo-to-github/","excerpt":"","text":"How to use Hexo and deploy to GitHub Pages How to use Hexo and deploy to GitHub Pages https://github.com/hexojs/hexo https://hexo.io/docs/ 1. Install Hexo123456789101112$ sudo npm install -g hexo-cli$ hexo -vhexo-cli: 0.1.9os: Darwin 14.3.0 darwin x64http_parser: 2.3node: 0.12.7v8: 3.28.71.19uv: 1.6.1zlib: 1.2.8modules: 14openssl: 1.0.1p 2. Create a project for your GitHub Pages1234567$ hexo init yt8yt.github.ioINFO Copying data to ~/***/yt8yt.github.ioINFO You are almost done! Don&apos;t forget to run &apos;npm install&apos; before you start blogging with Hexo!$ cd yt8yt.github.io$ npm install 3. Run a test server for your page on Mac12$ hexo serverINFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 4. Set information for your new bloghttps://hexo.io/docs/configuration.html1234567891011121314151617$ vi _config.yml~~~~~~~~~~~~~~~~~~ _config.yml ~~~~~~~~~~~~~~~~~~# Sitetitle: yt8yt&apos;s notesubtitle:description: yt8yt&apos;s personal blogauthor: yt8ytlanguage:timezone: Japan# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://yt8yt.github.io/root: /permalink: :year/:month/:day/:title/permalink_defaults: 5. Set information to use Githttps://github.com/hexojs/hexo-deployer-git12345678910$ npm install hexo-deployer-git --save$ vi _config.yml~~~~~~~~~~~~~~~~~~ _config.yml ~~~~~~~~~~~~~~~~~~# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:yt8yt/yt8yt.github.io.git branch: master 6. Set “watch” before starting your work“watch” command can monitor your files.https://hexo.io/docs/generating.html1$ hexo generate --watch 7. Create a new post file12$ hexo new first-postINFO Created: ~/***/yt8yt.github.io/source/_posts/first-post.md 8. Edit the above file with Markdown or Hexo’s HelperHexo’s Helperhttps://hexo.io/docs/helpers.htmlI use Atom with “shift + control + m” when I use Markdown :-)https://atom.io/ 9. Delete “source/_posts/hello-world.md”It’s not necessary to deploy. 10. Deploy your new blog!!https://hexo.io/docs/deployment.html12$ hexo clean$ hexo deploy After writting the above command, you can see your new blog on GitHub Pages.http://**.github.io/ 11. Change your blog themehttps://github.com/hexojs/hexo/wiki/Themes1234567891011121314151617181920For instance, How to use the following theme.https://hexo.io/hexo-theme-light/## Install it$ cd yt8yt.github.io$ git clone git://github.com/tommy351/hexo-theme-light.git themes/light## Update the above files$ themes/light$ git pull## Set information to use the theme$ cd yt8yt.github.io$ vi _config.yml~~~~~~~~~~~~~~~~~~ _config.yml ~~~~~~~~~~~~~~~~~~# Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/theme: light 12. Create a new page filehttps://hexo.io/docs/writing.html123456$ hexo new page aboutmeINFO Created: ~/***/yt8yt.github.io/source/aboutme/index.md$ cd source/aboutme/$ vi index.md 13. Use “Read More”Write &lt;!-- more --&gt; in your articles. 14. Use Pluginshttps://github.com/hexojs/hexo/wiki/Plugins","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-11-01T15:45:36.833Z","updated":"2018-12-09T10:52:58.427Z","comments":true,"path":"essays/hello-world/","link":"","permalink":"https://github.com/chandchen/essays/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}